{
  "name": "vscode-electron-build-tools",
  "displayName": "Electron Build Tools",
  "publisher": "dsanders11",
  "description": "A collection of VS Code helpers related to developing the Electron project.",
  "icon": "resources/icons/electron_logo.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/dsanders11/vscode-electron-build-tools.git"
  },
  "license": "MIT",
  "version": "0.5.0",
  "engines": {
    "vscode": "^1.51.1"
  },
  "activationEvents": [
    "workspaceContains:ELECTRON_VERSION",
    "workspaceContains:electron/ELECTRON_VERSION",
    "onView:electron-build-tools:configs",
    "onView:electron-build-tools:patches",
    "onView:electron-build-tools:tests",
    "onView:electron-build-tools:docs",
    "onView:electron-build-tools:electron"
  ],
  "categories": [
    "Extension Packs",
    "Linters",
    "Other"
  ],
  "keywords": [
    "Electron",
    "build-tools"
  ],
  "contributes": {
    "colors": [
      {
        "id": "electronBuildTools.gettingStartedIcon",
        "description": "Color for the \"Getting Started\" icon tree item in the Electron view.",
        "defaults": {
          "dark": "debugIcon.pauseForeground",
          "highContrast": "debugIcon.pauseForeground",
          "light": "debugIcon.pauseForeground"
        }
      },
      {
        "id": "electronBuildTools.codeOfConductIcon",
        "description": "Color for the \"Code of Conduct\" icon tree item in the Electron view.",
        "defaults": {
          "dark": "terminal.ansiYellow",
          "highContrast": "terminal.ansiYellow",
          "light": "terminal.ansiYellow"
        }
      },
      {
        "id": "electronBuildTools.contributingIcon",
        "description": "Color for the \"Contributing to Electron\" icon tree item in the Electron view.",
        "defaults": {
          "dark": "debugIcon.startForeground",
          "highContrast": "debugIcon.startForeground",
          "light": "debugIcon.startForeground"
        }
      },
      {
        "id": "electronBuildTools.securityIssuesIcon",
        "description": "Color for the \"Reporting Security Issues\" icon tree item in the Electron view.",
        "defaults": {
          "dark": "#cc6633",
          "highContrast": "#cc6633",
          "light": "#cc6633"
        }
      }
    ],
    "commands": [
      {
        "command": "electron-build-tools.build",
        "title": "Build",
        "category": "Electron Build Tools",
        "enablement": "electron-build-tools:canBuild"
      },
      {
        "command": "electron-build-tools.openPatch",
        "title": "Open Patch"
      },
      {
        "command": "electron-build-tools.openTestFile",
        "title": "Open Test File"
      },
      {
        "command": "markdown.prettifyTable",
        "title": "Prettify Table",
        "enablement": "editorHasSelection"
      },
      {
        "command": "markdown.rewrapSelections",
        "title": "Rewrap Selections(s)",
        "enablement": "editorHasSelection"
      },
      {
        "command": "markdown.wrapLines",
        "title": "Wrap Line(s)",
        "enablement": "editorTextFocus"
      },
      {
        "command": "electron-build-tools.remove-config",
        "title": "Remove Config",
        "icon": "$(trash)",
        "enablement": "viewItem == config"
      },
      {
        "command": "electron-build-tools.refreshPatches",
        "title": "Refresh Patches",
        "icon": "$(refresh)",
        "enablement": "electron-build-tools:canRefreshPatches"
      },
      {
        "command": "electron-build-tools.refreshTests",
        "title": "Refresh Tests",
        "icon": "$(refresh)",
        "enablement": "electron-build-tools:canLoadTests"
      },
      {
        "command": "electron-build-tools.removePullRequestPatch",
        "title": "Remove Pull Request",
        "icon": "$(x)"
      },
      {
        "command": "electron-build-tools.revealInElectronSidebar",
        "title": "Reveal in Electron Side Bar",
        "enablement": "electron-build-tools:active"
      },
      {
        "command": "electron-build-tools.runTest",
        "title": "Run Test",
        "icon": "$(run)"
      },
      {
        "command": "electron-build-tools.runTestFile",
        "title": "Run Test File",
        "icon": "$(run-all)"
      },
      {
        "command": "electron-build-tools.runTestRunner",
        "title": "Run Test Runner",
        "icon": "$(run-all)"
      },
      {
        "command": "electron-build-tools.runTestSuite",
        "title": "Run Test Suite",
        "icon": "$(run-all)"
      },
      {
        "command": "electron-build-tools.sanitize-config",
        "title": "Sanitize Config"
      },
      {
        "command": "electron-build-tools.searchDocs",
        "title": "Search Docs",
        "category": "Electron Build Tools",
        "icon": "$(search)",
        "enablement": "electron-build-tools:ready"
      },
      {
        "command": "electron-build-tools.showPatchedFileDiff",
        "title": "Show Patched File Diff"
      },
      {
        "command": "electron-build-tools.show.goma",
        "title": "Show Goma",
        "category": "Electron Build Tools"
      },
      {
        "command": "electron-build-tools.showPatchesDocs",
        "title": "Show Patches Documentation",
        "icon": "$(remote-explorer-documentation)",
        "enablement": "electron-build-tools:ready"
      },
      {
        "command": "electron-build-tools.showPatchOverview",
        "title": "Show Patch Overview"
      },
      {
        "command": "electron-build-tools.showTestsDocs",
        "title": "Show Tests Documentation",
        "icon": "$(remote-explorer-documentation)",
        "enablement": "electron-build-tools:ready"
      },
      {
        "command": "electron-build-tools.sync",
        "title": "Sync",
        "category": "Electron Build Tools",
        "enablement": "electron-build-tools:canSync"
      },
      {
        "command": "electron-build-tools.sync.force",
        "title": "Force Sync",
        "category": "Electron Build Tools"
      },
      {
        "command": "electron-build-tools.test",
        "title": "Run Tests",
        "category": "Electron Build Tools",
        "icon": "$(run-all)",
        "enablement": "electron-build-tools:canRunTests"
      },
      {
        "command": "electron-build-tools.use-config",
        "title": "Use Config",
        "icon": "$(check)",
        "enablement": "viewItem == config"
      },
      {
        "command": "electron-build-tools.use-config.quick-pick",
        "title": "Use Config",
        "category": "Electron Build Tools",
        "enablement": "electron-build-tools:canChangeConfig"
      },
      {
        "command": "electron-build-tools.viewPullRequestPatch",
        "title": "Find Pull Request",
        "icon": "$(search)"
      }
    ],
    "configuration": {
      "title": "Electron Build Tools",
      "properties": {
        "electronBuildTools.build.buildOptions": {
          "type": "object",
          "properties": {
            "--no-goma": {
              "type": "string",
              "description": "Build without goma.",
              "enum": [
                ""
              ]
            },
            "--gen": {
              "type": "string",
              "description": "Force a re-run of `gn gen` before building.",
              "enum": [
                ""
              ]
            },
            "--target": {
              "type": "string",
              "description": "Forces a specific ninja target.",
              "minLength": 1
            }
          },
          "default": {},
          "title": "Build Options",
          "description": "Options to use when building."
        },
        "electronBuildTools.build.defaultTarget": {
          "type": "string",
          "description": "Default target to build. Leave blank to use the config default.",
          "enum": [
            "----",
            "breakpad",
            "chromedriver",
            "electron",
            "electron:dist",
            "mksnapshot",
            "node:headers"
          ],
          "default": "----"
        },
        "electronBuildTools.build.ninjaArgs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {},
          "title": "Ninja Args",
          "description": "Args to pass to Ninja when building."
        },
        "electronBuildTools.build.showTargets": {
          "type": "boolean",
          "default": false,
          "title": "Show Targets",
          "description": "When building, show a list of build targets to choose from."
        },
        "electronBuildTools.buildTools.executable": {
          "type": "string",
          "description": "Executable to use for running `build-tools` commands.",
          "enum": [
            "electron-build-tools",
            "e"
          ],
          "default": "electron-build-tools"
        },
        "electronBuildTools.docs.lintRelativeLinks": {
          "type": "boolean",
          "default": true,
          "title": "Lint Relative Links",
          "description": "Lint relative links in the docs and mark broken links as problems."
        },
        "electronBuildTools.tests.runTestCodeLens": {
          "type": "boolean",
          "default": true,
          "title": "Run Test Code Lens",
          "description": "Show 'Run Test' in editor above Electron tests."
        }
      }
    },
    "debuggers": [
      {
        "type": "electron.cpp.windows",
        "label": "Electron: C++ (Windows)",
        "initialConfigurations": [
          {
            "name": "Electron: C++ (Windows)",
            "type": "cppvsdbg",
            "request": "launch",
            "program": "${command:electron-build-tools.show.exe}",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${command:electron-build-tools.show.root}\\src",
            "environment": [
              {
                "name": "ELECTRON_ENABLE_LOGGING",
                "value": "true"
              },
              {
                "name": "ELECTRON_ENABLE_STACK_DUMPING",
                "value": "true"
              },
              {
                "name": "ELECTRON_RUN_AS_NODE",
                "value": ""
              }
            ],
            "externalConsole": false,
            "sourceFileMap": {
              "o:\\": "${command:electron-build-tools.show.root}\\src"
            }
          }
        ]
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": "evm.*.json",
        "url": "./schemas/evm-config.schema.json"
      },
      {
        "fileMatch": "patches/config.json",
        "url": "./schemas/patches-config.schema.json"
      }
    ],
    "languages": [
      {
        "id": "python",
        "filenames": [
          "DEPS"
        ]
      }
    ],
    "markdown.markdownItPlugins": true,
    "menus": {
      "commandPalette": [
        {
          "command": "electron-build-tools.build",
          "when": "electron-build-tools:build-tools-installed"
        },
        {
          "command": "electron-build-tools.openPatch",
          "when": "false"
        },
        {
          "command": "electron-build-tools.openTestFile",
          "when": "false"
        },
        {
          "command": "electron-build-tools.remove-config",
          "when": "false"
        },
        {
          "command": "electron-build-tools.refreshPatches",
          "when": "false"
        },
        {
          "command": "electron-build-tools.refreshTests",
          "when": "false"
        },
        {
          "command": "electron-build-tools.removePullRequestPatch",
          "when": "false"
        },
        {
          "command": "electron-build-tools.revealInElectronSidebar",
          "when": "false"
        },
        {
          "command": "electron-build-tools.runTest",
          "when": "false"
        },
        {
          "command": "electron-build-tools.runTestFile",
          "when": "false"
        },
        {
          "command": "electron-build-tools.runTestRunner",
          "when": "false"
        },
        {
          "command": "electron-build-tools.runTestSuite",
          "when": "false"
        },
        {
          "command": "electron-build-tools.sanitize-config",
          "when": "false"
        },
        {
          "command": "electron-build-tools.searchDocs",
          "when": "electron-build-tools:active"
        },
        {
          "command": "electron-build-tools.show.goma",
          "when": "electron-build-tools:build-tools-installed"
        },
        {
          "command": "electron-build-tools.showPatchedFileDiff",
          "when": "false"
        },
        {
          "command": "electron-build-tools.showPatchesDocs",
          "when": "false"
        },
        {
          "command": "electron-build-tools.showPatchOverview",
          "when": "false"
        },
        {
          "command": "electron-build-tools.showTestsDocs",
          "when": "false"
        },
        {
          "command": "electron-build-tools.sync",
          "when": "electron-build-tools:build-tools-installed"
        },
        {
          "command": "electron-build-tools.sync.force",
          "when": "electron-build-tools:build-tools-installed"
        },
        {
          "command": "electron-build-tools.test",
          "when": "electron-build-tools:build-tools-installed"
        },
        {
          "command": "electron-build-tools.use-config",
          "when": "false"
        },
        {
          "command": "electron-build-tools.use-config.quick-pick",
          "when": "electron-build-tools:build-tools-installed"
        },
        {
          "command": "electron-build-tools.viewPullRequestPatch",
          "when": "false"
        },
        {
          "command": "markdown.prettifyTable",
          "when": "false"
        },
        {
          "command": "markdown.rewrapSelections",
          "when": "false"
        },
        {
          "command": "markdown.wrapLines",
          "when": "false"
        }
      ],
      "editor/context": [
        {
          "command": "markdown.prettifyTable",
          "when": "electron-build-tools:ready && resourceLangId == markdown",
          "group": "1_modification"
        },
        {
          "command": "markdown.rewrapSelections",
          "when": "electron-build-tools:ready && resourceLangId == markdown",
          "group": "1_modification"
        },
        {
          "command": "markdown.wrapLines",
          "when": "electron-build-tools:ready && resourceLangId == markdown",
          "group": "1_modification"
        }
      ],
      "editor/title": [
        {
          "command": "electron-build-tools.runTestFile",
          "group": "navigation",
          "when": "resourceLangId == typescript && resourceDirname =~ /.*electron(?:\\\\|\\/)(?:spec-main|spec)$/ && resourceFilename =~ /.*-spec.ts$/"
        }
      ],
      "explorer/context": [
        {
          "command": "electron-build-tools.revealInElectronSidebar",
          "group": "navigation",
          "when": "electron-build-tools:ready && resourceDirname =~ /.*electron(?:\\\\|\\/)patches(?:\\\\|\\/).*$/ && resourceExtname == .patch"
        }
      ],
      "view/item/context": [
        {
          "command": "electron-build-tools.remove-config",
          "when": "view == electron-build-tools:configs && viewItem =~ /^active-config$|^config$/"
        },
        {
          "command": "electron-build-tools.remove-config",
          "when": "view == electron-build-tools:configs && viewItem =~ /^active-config$|^config$/",
          "group": "inline"
        },
        {
          "command": "electron-build-tools.sanitize-config",
          "when": "view == electron-build-tools:configs && viewItem =~ /^active-config$|^config$/"
        },
        {
          "command": "electron-build-tools.use-config",
          "when": "view == electron-build-tools:configs && viewItem =~ /^active-config$|^config$/"
        },
        {
          "command": "electron-build-tools.use-config",
          "when": "view == electron-build-tools:configs && viewItem =~ /^active-config$|^config$/",
          "group": "inline"
        },
        {
          "command": "electron-build-tools.refreshPatches",
          "when": "view == electron-build-tools:patches && viewItem == repo",
          "group": "inline"
        },
        {
          "command": "electron-build-tools.removePullRequestPatch",
          "when": "view == electron-build-tools:patches && viewItem == pull-request"
        },
        {
          "command": "electron-build-tools.removePullRequestPatch",
          "when": "view == electron-build-tools:patches && viewItem == pull-request",
          "group": "inline"
        },
        {
          "command": "electron-build-tools.viewPullRequestPatch",
          "when": "view == electron-build-tools:patches && viewItem == view-pull-request-patch",
          "group": "inline"
        },
        {
          "command": "electron-build-tools.runTest",
          "when": "view == electron-build-tools:tests && viewItem == test",
          "group": "inline"
        },
        {
          "command": "electron-build-tools.runTestRunner",
          "when": "view == electron-build-tools:tests && viewItem == runner",
          "group": "inline"
        },
        {
          "command": "electron-build-tools.runTestSuite",
          "when": "view == electron-build-tools:tests && viewItem == suite",
          "group": "inline"
        },
        {
          "command": "electron-build-tools.openPatch",
          "when": "view == electron-build-tools:patches && viewItem == patch"
        },
        {
          "command": "electron-build-tools.openTestFile",
          "when": "view == electron-build-tools:tests && viewItem =~ /^test$|^suite$/"
        }
      ],
      "view/title": [
        {
          "command": "electron-build-tools.refreshPatches",
          "when": "view == electron-build-tools:patches",
          "group": "navigation"
        },
        {
          "command": "electron-build-tools.refreshTests",
          "when": "view == electron-build-tools:tests",
          "group": "navigation"
        },
        {
          "command": "electron-build-tools.showPatchesDocs",
          "when": "view == electron-build-tools:patches",
          "group": "navigation"
        },
        {
          "command": "electron-build-tools.test",
          "when": "view == electron-build-tools:tests",
          "group": "navigation"
        },
        {
          "command": "electron-build-tools.showTestsDocs",
          "when": "view == electron-build-tools:tests",
          "group": "navigation"
        },
        {
          "command": "electron-build-tools.searchDocs",
          "when": "view == electron-build-tools:docs",
          "group": "navigation"
        }
      ]
    },
    "problemMatchers": [
      {
        "name": "electron",
        "source": "electron-build-tools",
        "label": "Electron Build Tools: Build Output",
        "fileLocation": [
          "relative",
          "${command:electron-build-tools.show.outdir}"
        ],
        "applyTo": "allDocuments",
        "pattern": {
          "regexp": "^(.*)\\((\\d+),(\\d+)\\):\\s+(warning|error):\\s+(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        }
      },
      {
        "name": "mocha",
        "source": "electron-build-tools",
        "label": "Electron Build Tools: Mocha Output",
        "fileLocation": [
          "autodetect",
          "${command:electron-build-tools.show.root}/src/"
        ],
        "applyTo": "allDocuments",
        "pattern": [
          {
            "regexp": "^\\s+(AssertionError: .*)$",
            "message": 1
          },
          {
            "regexp": "^.*\\((.*):(\\d+):(\\d+)\\)\\s*$",
            "file": 1,
            "line": 2,
            "column": 3
          }
        ]
      }
    ],
    "snippets": [
      {
        "language": "typescript",
        "path": "./snippets/mocha-specs.json"
      }
    ],
    "views": {
      "electron-build-tools": [
        {
          "id": "electron-build-tools:welcome",
          "name": "Welcome",
          "when": "electron-build-tools:ready && !electron-build-tools:build-tools-installed"
        },
        {
          "id": "electron-build-tools:workspace",
          "name": "Workspace",
          "when": "electron-build-tools:ready && electron-build-tools:build-tools-installed && !electron-build-tools:is-electron-workspace "
        },
        {
          "id": "electron-build-tools:electron",
          "name": "Electron",
          "when": "!electron-build-tools:ready || electron-build-tools:active"
        },
        {
          "id": "electron-build-tools:configs",
          "name": "Configs",
          "when": "!electron-build-tools:ready || electron-build-tools:active"
        },
        {
          "id": "electron-build-tools:patches",
          "name": "Patches",
          "when": "!electron-build-tools:ready || electron-build-tools:active"
        },
        {
          "id": "electron-build-tools:tests",
          "name": "Tests",
          "when": "!electron-build-tools:ready || electron-build-tools:active"
        },
        {
          "id": "electron-build-tools:docs",
          "name": "Electron Documentation",
          "when": "!electron-build-tools:ready || electron-build-tools:active",
          "visibility": "collapsed"
        },
        {
          "id": "electron-build-tools:help",
          "name": "Help and Feedback",
          "visibility": "collapsed"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "electron-build-tools",
          "title": "Electron Build Tools",
          "icon": "resources/icons/electron-activitybar.svg"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "electron-build-tools:welcome",
        "contents": "In order to use the Electron Build Tools extension, you need build-tools installed.\nFind out more at the [build-tools repository](https://github.com/electron/build-tools).\nIf you have build-tools installed and you're seeing this, take a look at the [troubleshooting guide](https://github.com/dsanders11/vscode-electron-build-tools/wiki/Troubleshooting)."
      },
      {
        "view": "electron-build-tools:workspace",
        "contents": "An Electron checkout wasn't found in this workspace.\n[Open Folder](command:vscode.openFolder)"
      }
    ]
  },
  "extensionPack": [
    "npclaudiu.vscode-gn"
  ],
  "main": "./out/src/extension.js",
  "scripts": {
    "vscode:prepublish": "yarn run compile",
    "compile": "tsc -p ./ && copyfiles electron/*.js out",
    "lint": "eslint src --ext ts && yarn prettier:check",
    "watch": "tsc -watch -p ./",
    "pretest": "yarn run compile && yarn run lint",
    "prettier:check": "prettier --check \"src/**/*.ts\" \"scripts/**/*.ts\" \"electron/**/*.js\"",
    "prettier:write": "prettier --write \"src/**/*.ts\" \"scripts/**/*.ts\" \"electron/**/*.js\""
  },
  "devDependencies": {
    "@commitlint/cli": "^11.0.0",
    "@commitlint/config-conventional": "^11.0.0",
    "@octokit/types": "^5.5.0",
    "@types/diff": "^4.0.2",
    "@types/glob": "^7.1.3",
    "@types/markdown-it": "^10.0.2",
    "@types/markdown-it-emoji": "^1.4.0",
    "@types/mocha": "^8.0.3",
    "@types/node": "^12.11.7",
    "@types/throttle-debounce": "^2.1.0",
    "@types/uuid": "^8.3.0",
    "@types/vscode": "^1.51.0",
    "@typescript-eslint/eslint-plugin": "^4.1.1",
    "@typescript-eslint/parser": "^4.1.1",
    "copyfiles": "^2.4.0",
    "eslint": "^7.9.0",
    "glob": "^7.1.6",
    "husky": "^4.3.0",
    "json-schema-to-typescript": "^9.1.1",
    "lint-staged": "^10.5.1",
    "prettier": "^2.1.2",
    "type-coverage": "^2.14.2",
    "typescript": "^4.0.2",
    "vscode-test": "^1.4.0"
  },
  "dependencies": {
    "@electron/docs-parser": "^0.10.1",
    "@octokit/rest": "^18.0.9",
    "chokidar": "^3.4.3",
    "diff": "^5.0.0",
    "markdown-it": "^10.0.0",
    "markdown-it-emoji": "^2.0.0",
    "throttle-debounce": "^3.0.1",
    "ts-node": "^9.0.0",
    "typescript-cached-transpile": "^0.0.6",
    "uuid": "^8.3.1",
    "word-wrap": "^1.2.3"
  },
  "lint-staged": {
    "*.ts": [
      "prettier --write"
    ]
  },
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged",
      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
    }
  }
}
